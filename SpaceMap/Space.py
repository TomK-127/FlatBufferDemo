# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SpaceMap

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Space(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Space()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSpace(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Space
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Space
    def SpaceObjects(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from SpaceMap.SpaceObject import SpaceObject
            obj = SpaceObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Space
    def SpaceObjectsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Space
    def SpaceObjectsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SpaceStart(builder): builder.StartObject(1)
def Start(builder):
    return SpaceStart(builder)
def SpaceAddSpaceObjects(builder, spaceObjects): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(spaceObjects), 0)
def AddSpaceObjects(builder, spaceObjects):
    return SpaceAddSpaceObjects(builder, spaceObjects)
def SpaceStartSpaceObjectsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartSpaceObjectsVector(builder, numElems):
    return SpaceStartSpaceObjectsVector(builder, numElems)
def SpaceEnd(builder): return builder.EndObject()
def End(builder):
    return SpaceEnd(builder)