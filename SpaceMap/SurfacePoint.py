# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SpaceMap

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SurfacePoint(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SurfacePoint()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSurfacePoint(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SurfacePoint
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SurfacePoint
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SurfacePoint
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def SurfacePointStart(builder): builder.StartObject(2)
def Start(builder):
    return SurfacePointStart(builder)
def SurfacePointAddLatitude(builder, latitude): builder.PrependInt32Slot(0, latitude, 0)
def AddLatitude(builder, latitude):
    return SurfacePointAddLatitude(builder, latitude)
def SurfacePointAddLongitude(builder, longitude): builder.PrependInt32Slot(1, longitude, 0)
def AddLongitude(builder, longitude):
    return SurfacePointAddLongitude(builder, longitude)
def SurfacePointEnd(builder): return builder.EndObject()
def End(builder):
    return SurfacePointEnd(builder)